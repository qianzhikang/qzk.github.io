<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于云服务器上的Redis</title>
      <link href="/qzk.github.io/2022/04/24/%E5%85%B3%E4%BA%8E%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84Redis/"/>
      <url>/qzk.github.io/2022/04/24/%E5%85%B3%E4%BA%8E%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="使用可视化工具连接云服务器Redis失败？"><a href="#使用可视化工具连接云服务器Redis失败？" class="headerlink" title="使用可视化工具连接云服务器Redis失败？"></a>使用可视化工具连接云服务器Redis失败？</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在云服务器上使用Docker安装Redis,想要实现向MySQL一样，可以远程可视化访问。可视化工具使用<code>Another Redis Desktop Manager</code>,初次尝试连接失败了，原因是<code>远程的Redis默认不支持远程访问</code>。</p><h2 id="安装并修改权限"><a href="#安装并修改权限" class="headerlink" title="安装并修改权限"></a>安装并修改权限</h2><h3 id="使用Docker安装Redis"><a href="#使用Docker安装Redis" class="headerlink" title="使用Docker安装Redis"></a>使用Docker安装Redis</h3><ol><li><p>拉取redis</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /home/docker/redis/<span class="token punctuation">&#123;</span>conf,data<span class="token punctuation">&#125;</span> -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>本地下载对应版本的redis，拷贝redis.conf，并修改部分内容 </p><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204240109751.png" alt="redis.conf文件位置"></p><blockquote><p>更改redis.conf配置文件（更改前建议先备份原始文件，更改备份后的文件）：</p><ol><li>注释 <code>bind 127.0.0.1</code>。这里限制redis只能本地访问，注释掉之后使redis可以外部访问；</li><li><code>protected-mode yes</code> 修改为 protected-mode no。默认yes，开启保护模式，限制仅本地访问，改为no之后使redis可以外部访问；</li><li><code>daemonize no</code> 。默认no，当前界面将进入redis的命令行界面，exit强制退出或者关闭连接工具(putty,xshell等)都会导致redis进程退出。 改为yes意为以守护进程方式启动，该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程，如果改为yes会使以配置文件方式启动redis的方式失败。</li><li><code>requirepass pwd</code>。这里的pwd是自己设置的密码，可以不开启，不开启表示无需密码即可连接。</li><li><code>databases 16</code>。默认数据库个数16，可以不修改。</li><li><code>appendonly no</code>。默认 no，表示不开启aof方式持久化，改为appendonly yes表示开启aof，可以不修改该配置。</li></ol><p><strong>主要是前两个配置，用于实现可以远程访问，如果只需要本地访问，则无需修改。</strong></p></blockquote></li><li><p>拷贝修改后的文件到远程服务器的 <code>/home/docker/redis/conf</code>下</p></li><li><p>启动容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -p <span class="token number">6379</span>:6379 --name redis -v /home/docker/redis/conf/redis.conf:/etc/redis/redis.conf -v /home/docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ol><li><code>-p 6379:6379</code>：把容器内的6379端口映射到宿主机6379端口。</li><li><code>--name redis</code>：指定容器名称。</li><li><code>-v /home/docker/redis/conf/redis.conf:/etc/redis/redis.conf</code>：把宿主机配置好的redis.conf放到容器内的这个位置中。</li><li><code>-v /home/docker/redis/data:/data</code>：把redis持久化的数据映射在宿主机内。</li><li><code>-d</code>：以守护进程的方式启动容器。<br>redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf：让redis按照redis.conf的配置启动。</li></ol></blockquote></li><li><p>使用<code>docker ps</code>检查是否启动成功：</p><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204240118120.png" alt="启动成功"></p></li></ol><h2 id="本地连接远程服务器的Redis"><a href="#本地连接远程服务器的Redis" class="headerlink" title="本地连接远程服务器的Redis"></a>本地连接远程服务器的Redis</h2><blockquote><p>Another Redis Desktop Manager 介绍</p></blockquote><p>Another Redis Desktop Manager是一款将Redis操作可视化的软件。</p><p>下载：<a href="https://github.com/qishibo/AnotherRedisDesktopManager">https://github.com/qishibo/AnotherRedisDesktopManager</a></p><p>下载完成后新建连接，在地址处输入服务器的ip地址和端口号，如有密码也进行输入，点击连接即可。</p><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204240122561.png" alt="新建远程链接"></p><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204240124057.png" alt="连接成功"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建教程</title>
      <link href="/qzk.github.io/2022/04/20/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
      <url>/qzk.github.io/2022/04/20/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><p>需要前置的本地环境：</p><ul><li>Node.js</li><li>npm</li><li>github账号</li><li>git（本地设置了远程ssh连接）</li></ul><h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2><p>官网：<a href="https://hexo.io/zh-cn/">Hexo</a></p><p><code>Hexo</code>是⾼效的静态站点⽣成框架，它基于Node.js。通过Hexo，你可以直接使⽤Markdown语法来撰写 博客。相信你肯定写过README.md⽂件吧，对，就是这个格式的&#x3D;！写完后只需两三条命令即可将⽣ 成的⽹⻚上传到你的github上，然后别⼈就可以看到你的⽹⻚啦。是不是很简单？你⽆需关⼼⽹⻚源代 码的具体细节，你只需要⽤⼼写好你的博客内容就⾏。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><blockquote><ol><li>全局安装<code>Hexo</code>，任意地⽅打开终端，安装Hexo。</li></ol></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-cli -g <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ol start="2"><li>初始化博客文件夹，任意地方打开终端初始化文件夹</li></ol></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init ‘文件夹名’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ol start="3"><li>安装依赖</li></ol></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Hexo生成静态页面"><a href="#Hexo生成静态页面" class="headerlink" title="Hexo生成静态页面"></a>Hexo生成静态页面</h2><h3 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h3><blockquote><p>新建一个博客编辑文件，将会在<code>/source/_posts</code>下生成一个md文件，用于编辑博客</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new post <span class="token string">"文件名"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>生成静态网页，将<code>/source/_posts</code>下的md文件生成为静态html的网页</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>启动⼀个本地服务器，端⼝默认<code>4000</code></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>清除/public目录下的所有文件，非必要情况请勿使用！</code></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本地访问生成的博客页面"><a href="#本地访问生成的博客页面" class="headerlink" title="本地访问生成的博客页面"></a>本地访问生成的博客页面</h3><p>浏览器打开<a href="http://localhost:4000/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%8C%E6%95%88%E6%9E%9C%E5%A6%82%E4%B8%8B">http://localhost:4000/，就可以看到博客啦，效果如下</a></p><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204192332355.png" alt="image-20220419233250273"></p><h2 id="修改博客主题"><a href="#修改博客主题" class="headerlink" title="修改博客主题"></a>修改博客主题</h2><p><em>这里以 <code>Matery</code> 主题为例。</em></p><p><em>主题仓库：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></em></p><blockquote><p>下载主题源码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中。</p></blockquote><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204192347005.png" alt="image-20220419234750932"></p><blockquote><p>修改 Hexo 根目录（注意不是主题文件夹下的）下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code>(上一步拖进去的文件夹的名字)</p></blockquote><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204192350014.png" alt="image-20220419235029954"></p><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204192351163.png" alt="image-20220419235123086"></p><p>更具这个主题的介绍，修改一些参数：</p><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204192354562.png" alt="image-20220419235413487"></p><h3 id="主题的一些个性化配置"><a href="#主题的一些个性化配置" class="headerlink" title="主题的一些个性化配置"></a>主题的一些个性化配置</h3><p>这部分只说明需要修改的文件位置，具体的配置修改可以看向主题官方文档。</p><p>官网链接：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">Matery中文说明文档</a></p><blockquote><p>这部分的修改都是在主题文件夹中修改，需要修改的文件在<code>/themes/hexo-theme-matery/_config.yml</code></p></blockquote><h2 id="推送-Github-并挂载"><a href="#推送-Github-并挂载" class="headerlink" title="推送 Github 并挂载"></a>推送 Github 并挂载</h2><h3 id="推送博客到Github"><a href="#推送博客到Github" class="headerlink" title="推送博客到Github"></a>推送博客到Github</h3><p>如果你已经有了Github的账号，并且本地配置了 git 的 <code>SSH key</code>, 就可以进行推送阶段了。</p><blockquote><p>这里需要一个插件，⽤于向github仓库发布内容，在hexo博客的根目录下，起终端执行安装命令：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>配置远程仓库的git地址，修改hexo博客根目录下的<code>_config.yml</code></p></blockquote><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204200018795.png" alt="image-20220420001818727"></p><blockquote><p>在项目更目录下执行命令进行推送</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置GitHub-Pages挂载博客"><a href="#设置GitHub-Pages挂载博客" class="headerlink" title="设置GitHub Pages挂载博客"></a>设置GitHub Pages挂载博客</h3><blockquote><p>来到仓库设置页面</p></blockquote><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204200024748.png" alt="image-20220420002427711"></p><blockquote><p> 选择page设置，将<code>Sourece</code>设置为主分支</p></blockquote><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204200032754.png" alt="image-20220420003241683"></p><h2 id="解决挂载后CSS失效问题"><a href="#解决挂载后CSS失效问题" class="headerlink" title="解决挂载后CSS失效问题"></a>解决挂载后CSS失效问题</h2><p>使用<code>github page</code>挂载的页面可能会出现css失效的问题，这里需要对本地进行一些配置。</p><blockquote><p>修改hexo博客根目录下的<code>_config.yml</code></p></blockquote><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204200023768.png" alt="url配置"></p><blockquote><p>这里的url 设置的规则为：<code>https://你的github用户名.github.io/你的仓库名</code></p></blockquote><p>完成以上配置后，再次<code>hexo g</code>生成一下页面进行更新，再使用<code>hexo d</code>推送即可。</p><p><em>推送成功后，访问页面可能会有一些延迟，可以稍微等个2分钟！</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub本地SSH配置</title>
      <link href="/qzk.github.io/2022/04/20/GitHub%E6%9C%AC%E5%9C%B0SSH%E9%85%8D%E7%BD%AE/"/>
      <url>/qzk.github.io/2022/04/20/GitHub%E6%9C%AC%E5%9C%B0SSH%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub本地SSH配置"><a href="#GitHub本地SSH配置" class="headerlink" title="GitHub本地SSH配置"></a>GitHub本地SSH配置</h1><p>需要前置环境：</p><ul><li>git</li><li>github账号</li></ul><blockquote><p>⾸先右键打开git bash，然后输⼊下⾯命令：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的githb⽤户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"你的github邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>输入命令生成ssh key，然后一路回车即可，表示都使用默认值（如果不想使用默认值，则根据提示输入对应的值即可，比如密钥文件的存放路径、密码等信息），之后在用户目录的 <code>.ssh</code> 文件夹下会自动生成 包含私钥的文件 <code>id_rsa</code> 和包含公钥的文件 <code>id_rsa.pub</code> 。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的github邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204200041943.png" alt="生成SSH密钥"></p><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204200042471.png" alt="生成的密钥文件"></p><blockquote><p>打开github，在头像下⾯点击settings，再点击<code>SSH and GPG keys</code>，新建⼀个SSH，名字随便，把⽤户 ⽬录下<code>.ssh/id_rsa.pub</code>的内容复制进去，确定 Add SSH key保存。</p></blockquote><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204200045150.png" alt="image-20220420004507095"></p><p>完成！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客~</title>
      <link href="/qzk.github.io/2022/04/19/hello-blog/"/>
      <url>/qzk.github.io/2022/04/19/hello-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>我是一名大三的在读学生，基于<code>Hexo</code>搭建了博客挂载在<code>Github</code>上。这个博客主要用于分享和记录一些学习心得和笔记。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>立个flag,此后会坚持不定时的往上分享学习记录和日记等等。</p><p><img src="https://pic-go.oss-cn-shanghai.aliyuncs.com/typora-img/202204192302457.jpg" alt="坚持到底！"></p><p>借此机会，希望可以养成记录习惯！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
